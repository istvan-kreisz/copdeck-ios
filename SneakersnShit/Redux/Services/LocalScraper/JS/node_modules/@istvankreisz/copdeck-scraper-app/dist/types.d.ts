import { Infer } from 'superstruct';
import { Struct } from 'superstruct/lib/struct';
import { BrowserConfig } from './browserConfigs';
declare const Optional: <T, S>(value: Struct<T, S>) => Struct<T | null | undefined, S>;
declare const Austria: {
    code: 'AT';
    name: 'Austria';
};
declare const Belgium: {
    code: 'BE';
    name: 'Belgium';
};
declare const Bulgaria: {
    code: 'BG';
    name: 'Bulgaria';
};
declare const Croatia: {
    code: 'HR';
    name: 'Croatia';
};
declare const Cyprus: {
    code: 'CY';
    name: 'Republic of Cyprus';
};
declare const CzechRepublic: {
    code: 'CZ';
    name: 'Czech Republic';
};
declare const Denmark: {
    code: 'DK';
    name: 'Denmark';
};
declare const Estonia: {
    code: 'EE';
    name: 'Estonia';
};
declare const Finland: {
    code: 'FI';
    name: 'Finland';
};
declare const France: {
    code: 'FR';
    name: 'France';
};
declare const Germany: {
    code: 'DE';
    name: 'Germany';
};
declare const Greece: {
    code: 'GR';
    name: 'Greece';
};
declare const Hungary: {
    code: 'HU';
    name: 'Hungary';
};
declare const Iceland: {
    code: 'IS';
    name: 'Iceland';
};
declare const Ireland: {
    code: 'IE';
    name: 'Ireland';
};
declare const Italy: {
    code: 'IT';
    name: 'Italy';
};
declare const Latvia: {
    code: 'LV';
    name: 'Latvia';
};
declare const Liechtenstein: {
    code: 'LI';
    name: 'Liechtenstein';
};
declare const Lithuania: {
    code: 'LT';
    name: 'Lithuania';
};
declare const Luxembourg: {
    code: 'LU';
    name: 'Luxembourg';
};
declare const Malta: {
    code: 'MT';
    name: 'Malta';
};
declare const Netherlands: {
    code: 'NL';
    name: 'Netherlands';
};
declare const Norway: {
    code: 'NO';
    name: 'Norway';
};
declare const Poland: {
    code: 'PL';
    name: 'Poland';
};
declare const Portugal: {
    code: 'PT';
    name: 'Portugal';
};
declare const Romania: {
    code: 'RO';
    name: 'Romania';
};
declare const Slovakia: {
    code: 'SK';
    name: 'Slovakia';
};
declare const Slovenia: {
    code: 'SI';
    name: 'Slovenia';
};
declare const Spain: {
    code: 'ES';
    name: 'Spain';
};
declare const Sweden: {
    code: 'SE';
    name: 'Sweden';
};
declare const Switzerland: {
    code: 'CH';
    name: 'Switzerland';
};
declare const UK: {
    code: 'GB';
    name: 'UK';
};
declare const US: {
    code: 'US';
    name: 'US (mainland)';
};
declare const USAH: {
    code: 'US-AH';
    name: 'US (Alaska, Hawaii)';
};
declare const ALLCOUNTRIES: ({
    code: 'AT';
    name: 'Austria';
} | {
    code: 'BE';
    name: 'Belgium';
} | {
    code: 'BG';
    name: 'Bulgaria';
} | {
    code: 'HR';
    name: 'Croatia';
} | {
    code: 'CY';
    name: 'Republic of Cyprus';
} | {
    code: 'CZ';
    name: 'Czech Republic';
} | {
    code: 'DK';
    name: 'Denmark';
} | {
    code: 'EE';
    name: 'Estonia';
} | {
    code: 'FI';
    name: 'Finland';
} | {
    code: 'FR';
    name: 'France';
} | {
    code: 'DE';
    name: 'Germany';
} | {
    code: 'GR';
    name: 'Greece';
} | {
    code: 'HU';
    name: 'Hungary';
} | {
    code: 'IS';
    name: 'Iceland';
} | {
    code: 'IE';
    name: 'Ireland';
} | {
    code: 'IT';
    name: 'Italy';
} | {
    code: 'LV';
    name: 'Latvia';
} | {
    code: 'LI';
    name: 'Liechtenstein';
} | {
    code: 'LT';
    name: 'Lithuania';
} | {
    code: 'LU';
    name: 'Luxembourg';
} | {
    code: 'MT';
    name: 'Malta';
} | {
    code: 'NL';
    name: 'Netherlands';
} | {
    code: 'NO';
    name: 'Norway';
} | {
    code: 'PL';
    name: 'Poland';
} | {
    code: 'PT';
    name: 'Portugal';
} | {
    code: 'RO';
    name: 'Romania';
} | {
    code: 'SK';
    name: 'Slovakia';
} | {
    code: 'SI';
    name: 'Slovenia';
} | {
    code: 'ES';
    name: 'Spain';
} | {
    code: 'SE';
    name: 'Sweden';
} | {
    code: 'CH';
    name: 'Switzerland';
} | {
    code: 'GB';
    name: 'UK';
} | {
    code: 'US';
    name: 'US (mainland)';
} | {
    code: 'US-AH';
    name: 'US (Alaska, Hawaii)';
})[];
declare type Country = typeof Austria | typeof Belgium | typeof Bulgaria | typeof Croatia | typeof Cyprus | typeof CzechRepublic | typeof Denmark | typeof Estonia | typeof Finland | typeof France | typeof Germany | typeof Greece | typeof Hungary | typeof Iceland | typeof Ireland | typeof Italy | typeof Latvia | typeof Liechtenstein | typeof Lithuania | typeof Luxembourg | typeof Malta | typeof Netherlands | typeof Norway | typeof Poland | typeof Portugal | typeof Romania | typeof Slovakia | typeof Slovenia | typeof Spain | typeof Sweden | typeof Switzerland | typeof UK | typeof US | typeof USAH;
declare type CountryCode = Country['code'];
declare type CountryName = Country['name'];
declare const FeeType: Struct<"None" | "Buy" | "Sell", null>;
declare type FeeType = Infer<typeof FeeType>;
declare const BUY: FeeType;
declare const SELL: FeeType;
declare const ALLFEETYPES: ("None" | "Buy" | "Sell")[];
declare const STOCKX: {
    id: 'stockx';
    name: 'StockX';
};
declare const KLEKT: {
    id: 'klekt';
    name: 'Klekt';
};
declare const GOAT: {
    id: 'goat';
    name: 'GOAT';
};
declare const ALLSTORES: ({
    id: 'stockx';
    name: 'StockX';
} | {
    id: 'klekt';
    name: 'Klekt';
} | {
    id: 'goat';
    name: 'GOAT';
})[];
declare const Store: Struct<{
    name: "StockX";
    id: "stockx";
} | {
    name: "Klekt";
    id: "klekt";
} | {
    name: "GOAT";
    id: "goat";
}, null>;
declare type Store = Infer<typeof Store>;
declare type StoreId = Store['id'];
declare const EUR: {
    code: 'EUR';
    symbol: '€';
};
declare const USD: {
    code: 'USD';
    symbol: '$';
};
declare const GBP: {
    code: 'GBP';
    symbol: '£';
};
declare const CHF: {
    code: 'CHF';
    symbol: 'CHF';
};
declare const NOK: {
    code: 'NOK';
    symbol: 'NOK';
};
declare const ALLCURRENCIES: ({
    code: 'EUR';
    symbol: '€';
} | {
    code: 'USD';
    symbol: '$';
} | {
    code: 'GBP';
    symbol: '£';
})[];
declare const Currency: Struct<{
    symbol: "€";
    code: "EUR";
} | {
    symbol: "$";
    code: "USD";
} | {
    symbol: "£";
    code: "GBP";
}, null>;
declare type Currency = Infer<typeof Currency>;
declare const CurrencyCode: Struct<"EUR" | "USD" | "GBP", null>;
declare type CurrencyCode = Infer<typeof CurrencyCode>;
declare const ALLCURRENCIESINTERNAL: ({
    code: 'EUR';
    symbol: '€';
} | {
    code: 'USD';
    symbol: '$';
} | {
    code: 'GBP';
    symbol: '£';
} | {
    code: 'CHF';
    symbol: 'CHF';
} | {
    code: 'NOK';
    symbol: 'NOK';
})[];
declare const CurrencyInternal: Struct<{
    symbol: "€";
    code: "EUR";
} | {
    symbol: "$";
    code: "USD";
} | {
    symbol: "£";
    code: "GBP";
} | {
    symbol: "CHF";
    code: "CHF";
} | {
    symbol: "NOK";
    code: "NOK";
}, null>;
declare type CurrencyInternal = Infer<typeof CurrencyInternal>;
declare const CurrencyCodeInternal: Struct<"EUR" | "USD" | "GBP" | "CHF" | "NOK", null>;
declare type CurrencyCodeInternal = Infer<typeof CurrencyCodeInternal>;
declare const ItemStatus: Struct<{
    listingPrices: {
        store: {
            name: "StockX";
            id: "stockx";
        } | {
            name: "Klekt";
            id: "klekt";
        } | {
            name: "GOAT";
            id: "goat";
        };
        price: number;
    }[];
} | {
    store?: {
        name: "StockX";
        id: "stockx";
    } | {
        name: "Klekt";
        id: "klekt";
    } | {
        name: "GOAT";
        id: "goat";
    } | null | undefined;
    sellingPrice?: number | null | undefined;
}, null>;
declare type ItemStatus = Infer<typeof ItemStatus>;
declare const Condition: Struct<"new" | "used", {
    new: "new";
    used: "used";
}>;
declare type Condition = Infer<typeof Condition>;
declare enum ConditionEnum {
    new = "new",
    used = "used"
}
declare const StoreInfoSchema: {
    name: Struct<string, null>;
    sku: Struct<string, null>;
    slug: Struct<string, null>;
    retailPrice: Struct<number | null | undefined, null>;
    imageURL: Struct<string | null | undefined, null>;
    url: Struct<string, null>;
    sellUrl: Struct<string, null>;
    buyUrl: Struct<string, null>;
    productId: Struct<string | null | undefined, null>;
    brand: Struct<string, null>;
    store: Struct<{
        name: "StockX";
        id: "stockx";
    } | {
        name: "Klekt";
        id: "klekt";
    } | {
        name: "GOAT";
        id: "goat";
    }, null>;
};
declare const StoreInfo: Struct<{
    name: string;
    store: {
        name: "StockX";
        id: "stockx";
    } | {
        name: "Klekt";
        id: "klekt";
    } | {
        name: "GOAT";
        id: "goat";
    };
    sku: string;
    slug: string;
    url: string;
    sellUrl: string;
    buyUrl: string;
    brand: string;
    retailPrice?: number | null | undefined;
    imageURL?: string | null | undefined;
    productId?: string | null | undefined;
}, {
    name: Struct<string, null>;
    sku: Struct<string, null>;
    slug: Struct<string, null>;
    retailPrice: Struct<number | null | undefined, null>;
    imageURL: Struct<string | null | undefined, null>;
    url: Struct<string, null>;
    sellUrl: Struct<string, null>;
    buyUrl: Struct<string, null>;
    productId: Struct<string | null | undefined, null>;
    brand: Struct<string, null>;
    store: Struct<{
        name: "StockX";
        id: "stockx";
    } | {
        name: "Klekt";
        id: "klekt";
    } | {
        name: "GOAT";
        id: "goat";
    }, null>;
}>;
declare type StoreInfo = Infer<typeof StoreInfo>;
declare const InventoryItem: Struct<{
    size: string;
    currencyCode: "EUR" | "USD" | "GBP";
    tags: string[];
    lowestAsk?: {
        noFees: number;
        withSellerFees?: number | null | undefined;
        withBuyerFees?: number | null | undefined;
    } | null | undefined;
    highestBid?: {
        noFees: number;
        withSellerFees?: number | null | undefined;
        withBuyerFees?: number | null | undefined;
    } | null | undefined;
    shoeCondition?: string | null | undefined;
    boxCondition?: string | null | undefined;
}, {
    size: Struct<string, null>;
    currencyCode: Struct<"EUR" | "USD" | "GBP", null>;
    lowestAsk: Struct<{
        noFees: number;
        withSellerFees?: number | null | undefined;
        withBuyerFees?: number | null | undefined;
    } | null | undefined, {
        noFees: Struct<number, null>;
        withSellerFees: Struct<number | null | undefined, null>;
        withBuyerFees: Struct<number | null | undefined, null>;
    }>;
    highestBid: Struct<{
        noFees: number;
        withSellerFees?: number | null | undefined;
        withBuyerFees?: number | null | undefined;
    } | null | undefined, {
        noFees: Struct<number, null>;
        withSellerFees: Struct<number | null | undefined, null>;
        withBuyerFees: Struct<number | null | undefined, null>;
    }>;
    shoeCondition: Struct<string | null | undefined, null>;
    boxCondition: Struct<string | null | undefined, null>;
    tags: Struct<string[], Struct<string, null>>;
}>;
declare type InventoryItem = Infer<typeof InventoryItem>;
declare const StorePrices: Struct<{
    store: {
        name: "StockX";
        id: "stockx";
    } | {
        name: "Klekt";
        id: "klekt";
    } | {
        name: "GOAT";
        id: "goat";
    };
    inventory: {
        size: string;
        currencyCode: "EUR" | "USD" | "GBP";
        tags: string[];
        lowestAsk?: {
            noFees: number;
            withSellerFees?: number | null | undefined;
            withBuyerFees?: number | null | undefined;
        } | null | undefined;
        highestBid?: {
            noFees: number;
            withSellerFees?: number | null | undefined;
            withBuyerFees?: number | null | undefined;
        } | null | undefined;
        shoeCondition?: string | null | undefined;
        boxCondition?: string | null | undefined;
    }[];
    retailPrice?: number | null | undefined;
}, {
    store: Struct<{
        name: "StockX";
        id: "stockx";
    } | {
        name: "Klekt";
        id: "klekt";
    } | {
        name: "GOAT";
        id: "goat";
    }, null>;
    retailPrice: Struct<number | null | undefined, null>;
    inventory: Struct<{
        size: string;
        currencyCode: "EUR" | "USD" | "GBP";
        tags: string[];
        lowestAsk?: {
            noFees: number;
            withSellerFees?: number | null | undefined;
            withBuyerFees?: number | null | undefined;
        } | null | undefined;
        highestBid?: {
            noFees: number;
            withSellerFees?: number | null | undefined;
            withBuyerFees?: number | null | undefined;
        } | null | undefined;
        shoeCondition?: string | null | undefined;
        boxCondition?: string | null | undefined;
    }[], Struct<{
        size: string;
        currencyCode: "EUR" | "USD" | "GBP";
        tags: string[];
        lowestAsk?: {
            noFees: number;
            withSellerFees?: number | null | undefined;
            withBuyerFees?: number | null | undefined;
        } | null | undefined;
        highestBid?: {
            noFees: number;
            withSellerFees?: number | null | undefined;
            withBuyerFees?: number | null | undefined;
        } | null | undefined;
        shoeCondition?: string | null | undefined;
        boxCondition?: string | null | undefined;
    }, {
        size: Struct<string, null>;
        currencyCode: Struct<"EUR" | "USD" | "GBP", null>;
        lowestAsk: Struct<{
            noFees: number;
            withSellerFees?: number | null | undefined;
            withBuyerFees?: number | null | undefined;
        } | null | undefined, {
            noFees: Struct<number, null>;
            withSellerFees: Struct<number | null | undefined, null>;
            withBuyerFees: Struct<number | null | undefined, null>;
        }>;
        highestBid: Struct<{
            noFees: number;
            withSellerFees?: number | null | undefined;
            withBuyerFees?: number | null | undefined;
        } | null | undefined, {
            noFees: Struct<number, null>;
            withSellerFees: Struct<number | null | undefined, null>;
            withBuyerFees: Struct<number | null | undefined, null>;
        }>;
        shoeCondition: Struct<string | null | undefined, null>;
        boxCondition: Struct<string | null | undefined, null>;
        tags: Struct<string[], Struct<string, null>>;
    }>>;
}>;
declare type StorePrices = Infer<typeof StorePrices>;
declare const ItemSchema: {
    id: Struct<string, null>;
    name: Struct<string | null | undefined, null>;
    retailPrice: Struct<number | null | undefined, null>;
    imageURL: Struct<{
        store: {
            name: "StockX";
            id: "stockx";
        } | {
            name: "Klekt";
            id: "klekt";
        } | {
            name: "GOAT";
            id: "goat";
        };
        url: string;
    } | null | undefined, {
        url: Struct<string, null>;
        store: Struct<{
            name: "StockX";
            id: "stockx";
        } | {
            name: "Klekt";
            id: "klekt";
        } | {
            name: "GOAT";
            id: "goat";
        }, null>;
    }>;
    ownedByCount: Struct<number | null | undefined, null>;
    priceAlertCount: Struct<number | null | undefined, null>;
    storeInfo: Struct<{
        name: string;
        store: {
            name: "StockX";
            id: "stockx";
        } | {
            name: "Klekt";
            id: "klekt";
        } | {
            name: "GOAT";
            id: "goat";
        };
        sku: string;
        slug: string;
        url: string;
        sellUrl: string;
        buyUrl: string;
        brand: string;
        retailPrice?: number | null | undefined;
        imageURL?: string | null | undefined;
        productId?: string | null | undefined;
    }[], Struct<{
        name: string;
        store: {
            name: "StockX";
            id: "stockx";
        } | {
            name: "Klekt";
            id: "klekt";
        } | {
            name: "GOAT";
            id: "goat";
        };
        sku: string;
        slug: string;
        url: string;
        sellUrl: string;
        buyUrl: string;
        brand: string;
        retailPrice?: number | null | undefined;
        imageURL?: string | null | undefined;
        productId?: string | null | undefined;
    }, {
        name: Struct<string, null>;
        sku: Struct<string, null>;
        slug: Struct<string, null>;
        retailPrice: Struct<number | null | undefined, null>;
        imageURL: Struct<string | null | undefined, null>;
        url: Struct<string, null>;
        sellUrl: Struct<string, null>;
        buyUrl: Struct<string, null>;
        productId: Struct<string | null | undefined, null>;
        brand: Struct<string, null>;
        store: Struct<{
            name: "StockX";
            id: "stockx";
        } | {
            name: "Klekt";
            id: "klekt";
        } | {
            name: "GOAT";
            id: "goat";
        }, null>;
    }>>;
    storePrices: Struct<{
        store: {
            name: "StockX";
            id: "stockx";
        } | {
            name: "Klekt";
            id: "klekt";
        } | {
            name: "GOAT";
            id: "goat";
        };
        inventory: {
            size: string;
            currencyCode: "EUR" | "USD" | "GBP";
            tags: string[];
            lowestAsk?: {
                noFees: number;
                withSellerFees?: number | null | undefined;
                withBuyerFees?: number | null | undefined;
            } | null | undefined;
            highestBid?: {
                noFees: number;
                withSellerFees?: number | null | undefined;
                withBuyerFees?: number | null | undefined;
            } | null | undefined;
            shoeCondition?: string | null | undefined;
            boxCondition?: string | null | undefined;
        }[];
        retailPrice?: number | null | undefined;
    }[], Struct<{
        store: {
            name: "StockX";
            id: "stockx";
        } | {
            name: "Klekt";
            id: "klekt";
        } | {
            name: "GOAT";
            id: "goat";
        };
        inventory: {
            size: string;
            currencyCode: "EUR" | "USD" | "GBP";
            tags: string[];
            lowestAsk?: {
                noFees: number;
                withSellerFees?: number | null | undefined;
                withBuyerFees?: number | null | undefined;
            } | null | undefined;
            highestBid?: {
                noFees: number;
                withSellerFees?: number | null | undefined;
                withBuyerFees?: number | null | undefined;
            } | null | undefined;
            shoeCondition?: string | null | undefined;
            boxCondition?: string | null | undefined;
        }[];
        retailPrice?: number | null | undefined;
    }, {
        store: Struct<{
            name: "StockX";
            id: "stockx";
        } | {
            name: "Klekt";
            id: "klekt";
        } | {
            name: "GOAT";
            id: "goat";
        }, null>;
        retailPrice: Struct<number | null | undefined, null>;
        inventory: Struct<{
            size: string;
            currencyCode: "EUR" | "USD" | "GBP";
            tags: string[];
            lowestAsk?: {
                noFees: number;
                withSellerFees?: number | null | undefined;
                withBuyerFees?: number | null | undefined;
            } | null | undefined;
            highestBid?: {
                noFees: number;
                withSellerFees?: number | null | undefined;
                withBuyerFees?: number | null | undefined;
            } | null | undefined;
            shoeCondition?: string | null | undefined;
            boxCondition?: string | null | undefined;
        }[], Struct<{
            size: string;
            currencyCode: "EUR" | "USD" | "GBP";
            tags: string[];
            lowestAsk?: {
                noFees: number;
                withSellerFees?: number | null | undefined;
                withBuyerFees?: number | null | undefined;
            } | null | undefined;
            highestBid?: {
                noFees: number;
                withSellerFees?: number | null | undefined;
                withBuyerFees?: number | null | undefined;
            } | null | undefined;
            shoeCondition?: string | null | undefined;
            boxCondition?: string | null | undefined;
        }, {
            size: Struct<string, null>;
            currencyCode: Struct<"EUR" | "USD" | "GBP", null>;
            lowestAsk: Struct<{
                noFees: number;
                withSellerFees?: number | null | undefined;
                withBuyerFees?: number | null | undefined;
            } | null | undefined, {
                noFees: Struct<number, null>;
                withSellerFees: Struct<number | null | undefined, null>;
                withBuyerFees: Struct<number | null | undefined, null>;
            }>;
            highestBid: Struct<{
                noFees: number;
                withSellerFees?: number | null | undefined;
                withBuyerFees?: number | null | undefined;
            } | null | undefined, {
                noFees: Struct<number, null>;
                withSellerFees: Struct<number | null | undefined, null>;
                withBuyerFees: Struct<number | null | undefined, null>;
            }>;
            shoeCondition: Struct<string | null | undefined, null>;
            boxCondition: Struct<string | null | undefined, null>;
            tags: Struct<string[], Struct<string, null>>;
        }>>;
    }>>;
    created: Struct<number | null | undefined, null>;
    updated: Struct<number | null | undefined, null>;
};
declare const Item: Struct<{
    id: string;
    storeInfo: {
        name: string;
        store: {
            name: "StockX";
            id: "stockx";
        } | {
            name: "Klekt";
            id: "klekt";
        } | {
            name: "GOAT";
            id: "goat";
        };
        sku: string;
        slug: string;
        url: string;
        sellUrl: string;
        buyUrl: string;
        brand: string;
        retailPrice?: number | null | undefined;
        imageURL?: string | null | undefined;
        productId?: string | null | undefined;
    }[];
    storePrices: {
        store: {
            name: "StockX";
            id: "stockx";
        } | {
            name: "Klekt";
            id: "klekt";
        } | {
            name: "GOAT";
            id: "goat";
        };
        inventory: {
            size: string;
            currencyCode: "EUR" | "USD" | "GBP";
            tags: string[];
            lowestAsk?: {
                noFees: number;
                withSellerFees?: number | null | undefined;
                withBuyerFees?: number | null | undefined;
            } | null | undefined;
            highestBid?: {
                noFees: number;
                withSellerFees?: number | null | undefined;
                withBuyerFees?: number | null | undefined;
            } | null | undefined;
            shoeCondition?: string | null | undefined;
            boxCondition?: string | null | undefined;
        }[];
        retailPrice?: number | null | undefined;
    }[];
    name?: string | null | undefined;
    retailPrice?: number | null | undefined;
    imageURL?: {
        store: {
            name: "StockX";
            id: "stockx";
        } | {
            name: "Klekt";
            id: "klekt";
        } | {
            name: "GOAT";
            id: "goat";
        };
        url: string;
    } | null | undefined;
    ownedByCount?: number | null | undefined;
    priceAlertCount?: number | null | undefined;
    created?: number | null | undefined;
    updated?: number | null | undefined;
}, {
    id: Struct<string, null>;
    name: Struct<string | null | undefined, null>;
    retailPrice: Struct<number | null | undefined, null>;
    imageURL: Struct<{
        store: {
            name: "StockX";
            id: "stockx";
        } | {
            name: "Klekt";
            id: "klekt";
        } | {
            name: "GOAT";
            id: "goat";
        };
        url: string;
    } | null | undefined, {
        url: Struct<string, null>;
        store: Struct<{
            name: "StockX";
            id: "stockx";
        } | {
            name: "Klekt";
            id: "klekt";
        } | {
            name: "GOAT";
            id: "goat";
        }, null>;
    }>;
    ownedByCount: Struct<number | null | undefined, null>;
    priceAlertCount: Struct<number | null | undefined, null>;
    storeInfo: Struct<{
        name: string;
        store: {
            name: "StockX";
            id: "stockx";
        } | {
            name: "Klekt";
            id: "klekt";
        } | {
            name: "GOAT";
            id: "goat";
        };
        sku: string;
        slug: string;
        url: string;
        sellUrl: string;
        buyUrl: string;
        brand: string;
        retailPrice?: number | null | undefined;
        imageURL?: string | null | undefined;
        productId?: string | null | undefined;
    }[], Struct<{
        name: string;
        store: {
            name: "StockX";
            id: "stockx";
        } | {
            name: "Klekt";
            id: "klekt";
        } | {
            name: "GOAT";
            id: "goat";
        };
        sku: string;
        slug: string;
        url: string;
        sellUrl: string;
        buyUrl: string;
        brand: string;
        retailPrice?: number | null | undefined;
        imageURL?: string | null | undefined;
        productId?: string | null | undefined;
    }, {
        name: Struct<string, null>;
        sku: Struct<string, null>;
        slug: Struct<string, null>;
        retailPrice: Struct<number | null | undefined, null>;
        imageURL: Struct<string | null | undefined, null>;
        url: Struct<string, null>;
        sellUrl: Struct<string, null>;
        buyUrl: Struct<string, null>;
        productId: Struct<string | null | undefined, null>;
        brand: Struct<string, null>;
        store: Struct<{
            name: "StockX";
            id: "stockx";
        } | {
            name: "Klekt";
            id: "klekt";
        } | {
            name: "GOAT";
            id: "goat";
        }, null>;
    }>>;
    storePrices: Struct<{
        store: {
            name: "StockX";
            id: "stockx";
        } | {
            name: "Klekt";
            id: "klekt";
        } | {
            name: "GOAT";
            id: "goat";
        };
        inventory: {
            size: string;
            currencyCode: "EUR" | "USD" | "GBP";
            tags: string[];
            lowestAsk?: {
                noFees: number;
                withSellerFees?: number | null | undefined;
                withBuyerFees?: number | null | undefined;
            } | null | undefined;
            highestBid?: {
                noFees: number;
                withSellerFees?: number | null | undefined;
                withBuyerFees?: number | null | undefined;
            } | null | undefined;
            shoeCondition?: string | null | undefined;
            boxCondition?: string | null | undefined;
        }[];
        retailPrice?: number | null | undefined;
    }[], Struct<{
        store: {
            name: "StockX";
            id: "stockx";
        } | {
            name: "Klekt";
            id: "klekt";
        } | {
            name: "GOAT";
            id: "goat";
        };
        inventory: {
            size: string;
            currencyCode: "EUR" | "USD" | "GBP";
            tags: string[];
            lowestAsk?: {
                noFees: number;
                withSellerFees?: number | null | undefined;
                withBuyerFees?: number | null | undefined;
            } | null | undefined;
            highestBid?: {
                noFees: number;
                withSellerFees?: number | null | undefined;
                withBuyerFees?: number | null | undefined;
            } | null | undefined;
            shoeCondition?: string | null | undefined;
            boxCondition?: string | null | undefined;
        }[];
        retailPrice?: number | null | undefined;
    }, {
        store: Struct<{
            name: "StockX";
            id: "stockx";
        } | {
            name: "Klekt";
            id: "klekt";
        } | {
            name: "GOAT";
            id: "goat";
        }, null>;
        retailPrice: Struct<number | null | undefined, null>;
        inventory: Struct<{
            size: string;
            currencyCode: "EUR" | "USD" | "GBP";
            tags: string[];
            lowestAsk?: {
                noFees: number;
                withSellerFees?: number | null | undefined;
                withBuyerFees?: number | null | undefined;
            } | null | undefined;
            highestBid?: {
                noFees: number;
                withSellerFees?: number | null | undefined;
                withBuyerFees?: number | null | undefined;
            } | null | undefined;
            shoeCondition?: string | null | undefined;
            boxCondition?: string | null | undefined;
        }[], Struct<{
            size: string;
            currencyCode: "EUR" | "USD" | "GBP";
            tags: string[];
            lowestAsk?: {
                noFees: number;
                withSellerFees?: number | null | undefined;
                withBuyerFees?: number | null | undefined;
            } | null | undefined;
            highestBid?: {
                noFees: number;
                withSellerFees?: number | null | undefined;
                withBuyerFees?: number | null | undefined;
            } | null | undefined;
            shoeCondition?: string | null | undefined;
            boxCondition?: string | null | undefined;
        }, {
            size: Struct<string, null>;
            currencyCode: Struct<"EUR" | "USD" | "GBP", null>;
            lowestAsk: Struct<{
                noFees: number;
                withSellerFees?: number | null | undefined;
                withBuyerFees?: number | null | undefined;
            } | null | undefined, {
                noFees: Struct<number, null>;
                withSellerFees: Struct<number | null | undefined, null>;
                withBuyerFees: Struct<number | null | undefined, null>;
            }>;
            highestBid: Struct<{
                noFees: number;
                withSellerFees?: number | null | undefined;
                withBuyerFees?: number | null | undefined;
            } | null | undefined, {
                noFees: Struct<number, null>;
                withSellerFees: Struct<number | null | undefined, null>;
                withBuyerFees: Struct<number | null | undefined, null>;
            }>;
            shoeCondition: Struct<string | null | undefined, null>;
            boxCondition: Struct<string | null | undefined, null>;
            tags: Struct<string[], Struct<string, null>>;
        }>>;
    }>>;
    created: Struct<number | null | undefined, null>;
    updated: Struct<number | null | undefined, null>;
}>;
declare type Item = Infer<typeof Item>;
declare const PriceAlertSchema: {
    id: Struct<string, null>;
    itemId: Struct<string, null>;
    name: Struct<string, null>;
    targetPrice: Struct<number, null>;
    targetSize: Struct<string, null>;
    relation: Struct<"above" | "below", null>;
    feeType: Struct<"None" | "Buy" | "Sell", null>;
    priceType: Struct<"ask" | "bid", null>;
    stores: Struct<({
        name: "StockX";
        id: "stockx";
    } | {
        name: "Klekt";
        id: "klekt";
    } | {
        name: "GOAT";
        id: "goat";
    })[], Struct<{
        name: "StockX";
        id: "stockx";
    } | {
        name: "Klekt";
        id: "klekt";
    } | {
        name: "GOAT";
        id: "goat";
    }, null>>;
    lastNotificationSent: Struct<number | null | undefined, null>;
    created: Struct<number | null | undefined, null>;
    updated: Struct<number | null | undefined, null>;
};
declare const PriceAlert: Struct<{
    name: string;
    id: string;
    itemId: string;
    targetPrice: number;
    targetSize: string;
    relation: "above" | "below";
    feeType: "None" | "Buy" | "Sell";
    priceType: "ask" | "bid";
    stores: ({
        name: "StockX";
        id: "stockx";
    } | {
        name: "Klekt";
        id: "klekt";
    } | {
        name: "GOAT";
        id: "goat";
    })[];
    created?: number | null | undefined;
    updated?: number | null | undefined;
    lastNotificationSent?: number | null | undefined;
}, {
    id: Struct<string, null>;
    itemId: Struct<string, null>;
    name: Struct<string, null>;
    targetPrice: Struct<number, null>;
    targetSize: Struct<string, null>;
    relation: Struct<"above" | "below", null>;
    feeType: Struct<"None" | "Buy" | "Sell", null>;
    priceType: Struct<"ask" | "bid", null>;
    stores: Struct<({
        name: "StockX";
        id: "stockx";
    } | {
        name: "Klekt";
        id: "klekt";
    } | {
        name: "GOAT";
        id: "goat";
    })[], Struct<{
        name: "StockX";
        id: "stockx";
    } | {
        name: "Klekt";
        id: "klekt";
    } | {
        name: "GOAT";
        id: "goat";
    }, null>>;
    lastNotificationSent: Struct<number | null | undefined, null>;
    created: Struct<number | null | undefined, null>;
    updated: Struct<number | null | undefined, null>;
}>;
declare type PriceAlert = Infer<typeof PriceAlert>;
declare const Proxy: Struct<{
    host: string;
    port: number;
    protocol: string;
    auth?: {
        password: string;
        username: string;
    } | undefined;
}, {
    host: Struct<string, null>;
    port: Struct<number, null>;
    protocol: Struct<string, null>;
    auth: Struct<{
        password: string;
        username: string;
    } | undefined, {
        username: Struct<string, null>;
        password: Struct<string, null>;
    }>;
}>;
declare type Proxy = Infer<typeof Proxy>;
declare const ExchangeRates: Struct<{
    usd: number;
    gbp: number;
    chf: number;
    nok: number;
}, {
    usd: Struct<number, null>;
    gbp: Struct<number, null>;
    chf: Struct<number, null>;
    nok: Struct<number, null>;
}>;
declare type ExchangeRates = Infer<typeof ExchangeRates>;
declare type SellerInfo = {
    countryName: CountryName;
    stockx: {
        sellerLevel: 1 | 2 | 3 | 4;
        taxes: 0 | number;
    };
    goat: {
        commissionPercentage: 9.5 | 15 | 20;
        cashOutFee: 0.029 | 0;
        taxes: 0 | number;
    };
};
declare type APIConfig = {
    currency: Currency;
    isLoggingEnabled: boolean;
    proxies: Proxy[];
    exchangeRates?: ExchangeRates;
    feeCalculation?: SellerInfo;
};
interface SneakerAPI {
    getExchangeRates(apiConfig: APIConfig): Promise<ExchangeRates>;
    searchItems(searchTerm: string, apiConfig: APIConfig): Promise<Array<Item>>;
    getItemPrices(item: Item, apiConfig: APIConfig): Promise<Item>;
}
declare type ScraperConfig = {
    browser: BrowserConfig;
    userAgent: string;
    isValid: boolean;
    cookie?: string;
    proxy?: Proxy;
    csrf?: string;
};
interface Scraper {
    store: StoreId;
    config?: ScraperConfig;
    set(fetcher: Fetcher): void;
    search(searchTerm: string, apiConfig: APIConfig, searchResults?: number): Promise<Array<StoreInfo>>;
    getItemPrices(storeInfo: StoreInfo, apiConfig: APIConfig): Promise<StorePrices>;
}
interface Fetcher {
    sendRequest(url: string, method: 'GET' | 'POST', headers: Record<string, string>, userAgent: string, cookie?: string, body?: string, proxy?: Proxy, responseType?: 'text' | 'json' | 'xml', isLoggingEnabled?: boolean): Promise<any>;
}
export { Optional, ItemStatus, Condition, ConditionEnum, Country, CountryCode, ALLCOUNTRIES, BUY, SELL, FeeType, ALLFEETYPES, Store, StoreId, STOCKX, KLEKT, GOAT, ALLSTORES, Currency, CurrencyCode, CountryName, EUR, USD, GBP, CHF, NOK, ALLCURRENCIES, CurrencyInternal, CurrencyCodeInternal, ALLCURRENCIESINTERNAL, StoreInfo, StoreInfoSchema, Item, ItemSchema, PriceAlert, PriceAlertSchema, InventoryItem, StorePrices, Proxy, ExchangeRates, SneakerAPI, SellerInfo, APIConfig, ScraperConfig, Scraper, Fetcher, };
