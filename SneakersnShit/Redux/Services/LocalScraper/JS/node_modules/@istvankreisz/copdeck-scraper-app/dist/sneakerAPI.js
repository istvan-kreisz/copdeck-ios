"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SneakerFetcher = void 0;
var stockx_1 = require("./stockx");
var klekt_1 = require("./klekt");
var goat_1 = require("./goat");
var utils_1 = require("./utils");
var types_1 = require("./types");
var typeUtils_1 = require("./typeUtils");
var config_1 = require("./config");
var superstruct_1 = require("superstruct");
var priceCalculator_1 = require("./priceCalculator");
var SneakerFetcher = /** @class */ (function () {
    function SneakerFetcher() {
        // todo: add referrer
        this.scrapers = [stockx_1.default, klekt_1.default, goat_1.default];
        this.priceCalculator = new priceCalculator_1.PriceCalculator();
    }
    SneakerFetcher.prototype.set = function (fetcher) {
        this.fetcher = fetcher;
        this.scrapers.forEach(function (scraper) {
            scraper.set(fetcher);
        });
    };
    SneakerFetcher.prototype.getExchangeRates = function (apiConfig) {
        var _a, _b, _c, _d, _e, _f, _g;
        return __awaiter(this, void 0, void 0, function () {
            var schema, headers, res, resultArray, usd, gbp, chf, nok;
            return __generator(this, function (_h) {
                switch (_h.label) {
                    case 0:
                        schema = {
                            currency: superstruct_1.string(),
                            rate: superstruct_1.number(),
                        };
                        headers = {
                            accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
                            'accept-language': 'en-US,en',
                            'cache-control': 'no-cache',
                            pragma: 'no-cache',
                            'sec-ch-ua': '" Not;A Brand";v="99", "Google Chrome";v="91", "Chromium";v="91"',
                            'sec-ch-ua-mobile': '?0',
                            'sec-fetch-dest': 'document',
                            'sec-fetch-mode': 'navigate',
                            'sec-fetch-site': 'none',
                            'sec-fetch-user': '?1',
                            'upgrade-insecure-requests': '1',
                            'Referrer-Policy': 'strict-origin-when-cross-origin',
                            mode: 'cors',
                            credentials: 'omit',
                        };
                        return [4 /*yield*/, this.fetcher.sendRequest('https://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml', 'GET', headers, typeUtils_1.getUserAgent('Chrome'), undefined, undefined, undefined, 'xml', apiConfig.isLoggingEnabled)];
                    case 1:
                        res = _h.sent();
                        resultArray = typeUtils_1.convertToArray((_c = (_b = (_a = res['gesmes:Envelope']) === null || _a === void 0 ? void 0 : _a.Cube) === null || _b === void 0 ? void 0 : _b.Cube) === null || _c === void 0 ? void 0 : _c.Cube, schema).filter(function (element) {
                            return types_1.ALLCURRENCIESINTERNAL.find(function (currency) { return currency.code === element.currency; });
                        });
                        usd = (_d = resultArray.find(function (element) { return element.currency === 'USD'; })) === null || _d === void 0 ? void 0 : _d.rate;
                        gbp = (_e = resultArray.find(function (element) { return element.currency === 'GBP'; })) === null || _e === void 0 ? void 0 : _e.rate;
                        chf = (_f = resultArray.find(function (element) { return element.currency === 'CHF'; })) === null || _f === void 0 ? void 0 : _f.rate;
                        nok = (_g = resultArray.find(function (element) { return element.currency === 'NOK'; })) === null || _g === void 0 ? void 0 : _g.rate;
                        if (usd && gbp && chf && nok) {
                            return [2 /*return*/, {
                                    usd: usd,
                                    gbp: gbp,
                                    chf: chf,
                                    nok: nok,
                                }];
                        }
                        else {
                            return [2 /*return*/, Promise.reject(new Error('currencies not found'))];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    SneakerFetcher.prototype.searchItems = function (searchTerm, apiConfig, store) {
        return __awaiter(this, void 0, void 0, function () {
            var items, requests, results, filteredItems;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        items = [];
                        requests = this.scrapers
                            .filter(function (scraper) { return !store || scraper.store === store; })
                            .map(function (scraper) { return scraper.search(searchTerm, apiConfig, store ? 6 : undefined); });
                        return [4 /*yield*/, typeUtils_1.promiseAllSkippingErrors(requests, utils_1.handleError)];
                    case 1:
                        results = _a.sent();
                        results
                            .flatMap(function (val) { return val; })
                            .filter(function (item) { return item.productId && item.sku; })
                            .forEach(function (storeInfo) {
                            var snkr = items.find(function (s) { return s.id === storeInfo.sku.toUpperCase(); });
                            if (snkr) {
                                snkr.storeInfo.push(storeInfo);
                            }
                            else {
                                items.push({
                                    id: storeInfo.sku,
                                    storeInfo: [storeInfo],
                                    storePrices: [],
                                    ownedByCount: null,
                                    priceAlertCount: null,
                                    created: null,
                                    updated: null,
                                });
                            }
                        });
                        filteredItems = items
                            .sort(function (item1, item2) { return (item1.storeInfo.length > item2.storeInfo.length ? -1 : 1); })
                            .slice(0, config_1.config.searchResultCount - 1);
                        filteredItems.forEach(function (item) {
                            var _a, _b;
                            item.name = (_a = typeUtils_1.itemStoresOrdered(item)) === null || _a === void 0 ? void 0 : _a[0].name;
                            item.retailPrice = (_b = item.storeInfo.find(function (info) { return info.retailPrice; })) === null || _b === void 0 ? void 0 : _b.retailPrice;
                            item.imageURL = typeUtils_1.itemImageURL(item);
                        });
                        return [2 /*return*/, filteredItems];
                }
            });
        });
    };
    SneakerFetcher.prototype.getItemPrices = function (item, apiConfig) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var currentStoreIds_1, missingStores, requests_1, results, updatedItem, newStoreInfos, requests, newPrices;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!typeUtils_1.didFailToFetchAllStorePrices(item)) return [3 /*break*/, 2];
                        currentStoreIds_1 = item.storeInfo.map(function (store) { return store.store.id; });
                        missingStores = types_1.ALLSTORES.filter(function (store) { return !currentStoreIds_1.includes(store.id); });
                        typeUtils_1.log('missing stores: ', apiConfig.isLoggingEnabled);
                        typeUtils_1.log(missingStores, apiConfig.isLoggingEnabled);
                        requests_1 = missingStores.map(function (store) {
                            return _this.searchItems(item.id, apiConfig, store.id);
                        });
                        return [4 /*yield*/, typeUtils_1.promiseAllSkippingErrors(requests_1, utils_1.handleError)];
                    case 1:
                        results = _b.sent();
                        updatedItem = (_a = results.map(function (items) { return items.find(function (i) { return i.id === item.id; }); })) === null || _a === void 0 ? void 0 : _a[0];
                        newStoreInfos = updatedItem === null || updatedItem === void 0 ? void 0 : updatedItem.storeInfo;
                        if (newStoreInfos) {
                            item.storeInfo = __spreadArray(__spreadArray([], item.storeInfo), newStoreInfos);
                        }
                        if (!item.imageURL) {
                            item.imageURL = updatedItem === null || updatedItem === void 0 ? void 0 : updatedItem.imageURL;
                        }
                        _b.label = 2;
                    case 2:
                        requests = this.scrapers
                            .map(function (scraper) {
                            var storeInfo = item.storeInfo.find(function (val) { return val.store.id === scraper.store; });
                            return storeInfo ? { storeInfo: storeInfo, scraper: scraper } : null;
                        })
                            .filter(typeUtils_1.notEmpty)
                            .map(function (val) { return val.scraper.getItemPrices(val.storeInfo, apiConfig); });
                        return [4 /*yield*/, typeUtils_1.promiseAllSkippingErrors(requests, utils_1.handleError)];
                    case 3:
                        newPrices = _b.sent();
                        newPrices.forEach(function (prices) {
                            var currentPricesIndex = item.storePrices.findIndex(function (p) { return p.store.id === prices.store.id; });
                            if (currentPricesIndex !== -1) {
                                if (prices.inventory.length) {
                                    item.storePrices[currentPricesIndex] = prices;
                                }
                            }
                            else {
                                item.storePrices.push(prices);
                            }
                        });
                        if (item.storePrices.find(function (prices) {
                            return prices.inventory.find(function (inventoryItem) {
                                return inventoryItem.size.toLowerCase().includes('w');
                            });
                        })) {
                            item.storePrices = item.storePrices.map(function (prices) {
                                prices.inventory = prices.inventory.map(function (inventoryItem) {
                                    return __assign(__assign({}, inventoryItem), { size: inventoryItem.size.includes('W')
                                            ? inventoryItem.size
                                            : inventoryItem.size + 'W' });
                                });
                                return prices;
                            });
                        }
                        item.storePrices = item.storePrices.map(function (prices) {
                            var calculatedPrices = prices;
                            calculatedPrices.inventory = calculatedPrices.inventory.map(function (inventoryItem) {
                                return apiConfig.feeCalculation
                                    ? _this.priceCalculator.calculatePrice(calculatedPrices.store.id, inventoryItem, apiConfig.feeCalculation, apiConfig.exchangeRates)
                                    : inventoryItem;
                            });
                            return calculatedPrices;
                        });
                        item.updated = new Date().getTime();
                        return [2 /*return*/, item];
                }
            });
        });
    };
    return SneakerFetcher;
}());
exports.SneakerFetcher = SneakerFetcher;
//# sourceMappingURL=sneakerAPI.js.map