"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PriceCalculator = void 0;
var types_1 = require("./types");
var typeUtils_1 = require("./typeUtils");
var PriceCalculator = /** @class */ (function () {
    function PriceCalculator() {
    }
    PriceCalculator.prototype.stockxSellerPrice = function (price, currencyCode, sellerInfo, exchangeRates) {
        var transactionFeePercentage = 9.5;
        switch (sellerInfo.stockx.sellerLevel) {
            case 1:
                transactionFeePercentage = 9.5;
                break;
            case 2:
                transactionFeePercentage = 9;
                break;
            case 3:
                transactionFeePercentage = 8.5;
                break;
            case 4:
                transactionFeePercentage = 8;
                break;
        }
        var minTransactionFee = 9;
        switch (currencyCode) {
            case 'USD':
                minTransactionFee = 9;
                break;
            case 'EUR':
                minTransactionFee = 7;
                break;
            case 'GBP':
                minTransactionFee = 7;
                break;
        }
        var transactionFee = Math.max((price * transactionFeePercentage) / 100, minTransactionFee);
        var paymentProcessingFee = price * 0.03;
        var shippingFee = { fee: 30, currency: types_1.USD };
        switch (sellerInfo.countryName) {
            case 'Belgium':
            case 'Austria':
            case 'France':
            case 'Luxembourg':
                shippingFee = { fee: 5, currency: types_1.EUR };
                break;
            case 'Bulgaria':
            case 'Czech Republic':
            case 'Croatia':
            case 'Denmark':
            case 'Hungary':
            case 'Iceland':
            case 'Ireland':
            case 'Italy':
            case 'Latvia':
            case 'Norway':
            case 'Poland':
            case 'Portugal':
            case 'Romania':
            case 'Slovakia':
            case 'Slovenia':
            case 'Spain':
            case 'Sweden':
            case 'Switzerland':
                shippingFee = { fee: 10, currency: types_1.EUR };
                break;
            case 'Estonia':
            case 'Finland':
            case 'Greece':
            case 'Liechtenstein':
            case 'Lithuania':
            case 'Malta':
            case 'Republic of Cyprus':
                shippingFee = { fee: 15, currency: types_1.EUR };
                break;
            case 'Germany':
            case 'Netherlands':
                shippingFee = { fee: 0, currency: types_1.EUR };
                break;
            case 'UK':
                shippingFee = { fee: 0, currency: types_1.GBP };
                break;
            case 'US (Alaska, Hawaii)':
            case 'US (mainland)':
                shippingFee = { fee: 0, currency: types_1.USD };
                break;
        }
        if (currencyCode === 'GBP') {
            shippingFee = { fee: 0, currency: types_1.GBP };
        }
        return Math.round(price -
            transactionFee -
            paymentProcessingFee -
            typeUtils_1.convert(shippingFee.fee, shippingFee.currency.code, currencyCode, false, exchangeRates));
    };
    PriceCalculator.prototype.stockxBuyerPrice = function (price, currencyCode, sellerInfo, exchangeRates) {
        var paymentProcessingFee = price * 0.03;
        var paymentProcessingFeeInUSD = typeUtils_1.convert(paymentProcessingFee, currencyCode, 'USD', false, exchangeRates);
        if (paymentProcessingFeeInUSD < 3) {
            paymentProcessingFee = typeUtils_1.convert(3, 'USD', currencyCode, false, exchangeRates);
        }
        else if (paymentProcessingFeeInUSD > 59.95) {
            paymentProcessingFee = typeUtils_1.convert(59.95, 'USD', currencyCode, false, exchangeRates);
        }
        var shippingFee = { fee: 30, currency: types_1.USD };
        switch (sellerInfo.countryName) {
            case 'Austria':
            case 'Belgium':
            case 'Bulgaria':
            case 'Czech Republic':
            case 'Denmark':
            case 'Estonia':
            case 'Finland':
            case 'France':
            case 'Germany':
            case 'Greece':
            case 'Hungary':
            case 'Ireland':
            case 'Italy':
            case 'Latvia':
            case 'Lithuania':
            case 'Luxembourg':
            case 'Netherlands':
            case 'Poland':
            case 'Portugal':
            case 'Romania':
            case 'Slovakia':
            case 'Slovenia':
            case 'Spain':
            case 'Sweden':
                switch (currencyCode) {
                    case 'EUR':
                        shippingFee = { fee: 15, currency: types_1.EUR };
                        break;
                    case 'USD':
                        shippingFee = { fee: 17.5, currency: types_1.USD };
                        break;
                    case 'GBP':
                        shippingFee = { fee: 13.5, currency: types_1.GBP };
                        break;
                }
                break;
            case 'Croatia':
            case 'Iceland':
            case 'Liechtenstein':
            case 'Malta':
            case 'Norway':
            case 'Republic of Cyprus':
                shippingFee = { fee: 25, currency: types_1.EUR };
                break;
            case 'Switzerland':
                shippingFee = { fee: 20, currency: types_1.CHF };
                break;
            case 'UK':
                shippingFee = { fee: 13.5, currency: types_1.GBP };
                break;
            case 'US (Alaska, Hawaii)':
                shippingFee = { fee: 25, currency: types_1.USD };
                break;
            case 'US (mainland)':
                shippingFee = { fee: 13.95, currency: types_1.USD };
                break;
        }
        var totalWithoutTaxes = price +
            paymentProcessingFee +
            typeUtils_1.convert(shippingFee.fee, shippingFee.currency.code, currencyCode, false, exchangeRates);
        var total = totalWithoutTaxes * (1 + sellerInfo.stockx.taxes / 100);
        return Math.round(total);
    };
    PriceCalculator.prototype.klektSellerPrice = function (price) {
        return Math.floor(price / 1.17);
    };
    PriceCalculator.prototype.klektBuyerPrice = function (price, currencyCode, sellerInfo) {
        var shippingFees = [
            ['Austria', 18, 17, 22],
            ['Belgium', 18, 17, 22],
            ['Bulgaria', 18, 17, 22],
            ['Croatia', 18, 17, 22],
            ['Republic of Cyprus', 18, 17, 22],
            ['Czech Republic', 18, 17, 22],
            ['Denmark', 18, 17, 22],
            ['Estonia', 18, 17, 22],
            ['Finland', 18, 17, 22],
            ['France', 12, 13, 15],
            ['Germany', 12, 13, 15],
            ['Greece', 18, 17, 22],
            ['Hungary', 18, 17, 22],
            ['Iceland', 18, 17, 22],
            ['Ireland', 18, 17, 22],
            ['Italy', 12, 13, 15],
            ['Latvia', 18, 17, 22],
            ['Liechtenstein', 18, 17, 22],
            ['Lithuania', 18, 17, 22],
            ['Luxembourg', 18, 17, 22],
            ['Malta', 18, 17, 22],
            ['Netherlands', 7, 8, 9],
            ['Norway', 18, 17, 22],
            ['Poland', 18, 17, 22],
            ['Portugal', 18, 17, 22],
            ['Romania', 18, 17, 22],
            ['Slovakia', 18, 17, 22],
            ['Slovenia', 18, 17, 22],
            ['Spain', 18, 17, 22],
            ['Sweden', 18, 17, 22],
            ['Switzerland', 18, 17, 22],
            ['UK', 7, 8, 9],
            ['US (mainland)', 20, 19, 25],
            ['US (Alaska, Hawaii)', 20, 19, 25],
        ];
        var shippingFee = shippingFees.find(function (fees) { return fees[0] === sellerInfo.countryName; });
        var fee = 0;
        if (shippingFee) {
            switch (currencyCode) {
                case 'EUR':
                    fee = shippingFee[1];
                    break;
                case 'GBP':
                    fee = shippingFee[2];
                    break;
                case 'USD':
                    fee = shippingFee[3];
                    break;
                default:
                    break;
            }
        }
        return Math.round(price + fee);
    };
    PriceCalculator.prototype.goatSellerPrice = function (price, currencyCode, sellerInfo, exchangeRates) {
        var sellerFee = 30;
        switch (sellerInfo.countryName) {
            case 'UK':
            case 'US (mainland)':
            case 'US (Alaska, Hawaii)':
            case 'Germany':
                sellerFee = 5;
                break;
            case 'Sweden':
            case 'Netherlands':
                sellerFee = 10;
                break;
            case 'Ireland':
            case 'Luxembourg':
            case 'Belgium':
            case 'France':
                sellerFee = 12;
                break;
            case 'Estonia':
            case 'Italy':
            case 'Finland':
            case 'Portugal':
            case 'Spain':
            case 'Denmark':
                sellerFee = 20;
                break;
            default:
                break;
        }
        sellerFee = typeUtils_1.convert(sellerFee, 'USD', currencyCode, false, exchangeRates);
        var commissionFee = (price * sellerInfo.goat.commissionPercentage) / 100;
        var totalSellingFee = sellerFee + commissionFee;
        var sellerPrice = price - totalSellingFee;
        var cashoutFee = sellerPrice * sellerInfo.goat.cashOutFee;
        var totalCashoutValue = sellerPrice - cashoutFee;
        return Math.floor(totalCashoutValue);
    };
    PriceCalculator.prototype.goatBuyerPrice = function (price, currencyCode, sellerInfo, exchangeRates) {
        var shippingFee = 40;
        if (sellerInfo.countryName === 'US (mainland)') {
            shippingFee = 12;
        }
        else if (sellerInfo.countryName === 'US (Alaska, Hawaii)') {
            shippingFee = 15;
        }
        var shipping = typeUtils_1.convert(shippingFee, 'USD', currencyCode, false, exchangeRates);
        var priceWithShipping = price + shipping;
        var vat = (priceWithShipping * sellerInfo.goat.taxes) / 100;
        return Math.round(priceWithShipping + vat);
    };
    PriceCalculator.prototype.calculatePrice = function (storeId, inventoryItem, sellerInfo, exchangeRates) {
        var _a, _b, _c, _d, _e, _f;
        switch (storeId) {
            case 'stockx':
                if ((_a = inventoryItem.lowestAsk) === null || _a === void 0 ? void 0 : _a.noFees) {
                    inventoryItem.lowestAsk.withSellerFees = this.stockxSellerPrice(inventoryItem.lowestAsk.noFees, inventoryItem.currencyCode, sellerInfo, exchangeRates);
                    inventoryItem.lowestAsk.withBuyerFees = this.stockxBuyerPrice(inventoryItem.lowestAsk.noFees, inventoryItem.currencyCode, sellerInfo, exchangeRates);
                }
                if ((_b = inventoryItem.highestBid) === null || _b === void 0 ? void 0 : _b.noFees) {
                    inventoryItem.highestBid.withSellerFees = this.stockxSellerPrice(inventoryItem.highestBid.noFees, inventoryItem.currencyCode, sellerInfo, exchangeRates);
                    inventoryItem.highestBid.withBuyerFees = this.stockxBuyerPrice(inventoryItem.highestBid.noFees, inventoryItem.currencyCode, sellerInfo, exchangeRates);
                }
                break;
            case 'klekt':
                if ((_c = inventoryItem.lowestAsk) === null || _c === void 0 ? void 0 : _c.noFees) {
                    inventoryItem.lowestAsk.withSellerFees = this.klektSellerPrice(inventoryItem.lowestAsk.noFees);
                    inventoryItem.lowestAsk.withBuyerFees = this.klektBuyerPrice(inventoryItem.lowestAsk.noFees, inventoryItem.currencyCode, sellerInfo);
                }
                if ((_d = inventoryItem.highestBid) === null || _d === void 0 ? void 0 : _d.noFees) {
                    inventoryItem.highestBid.withSellerFees = this.klektSellerPrice(inventoryItem.highestBid.noFees);
                    inventoryItem.highestBid.withBuyerFees = this.klektBuyerPrice(inventoryItem.highestBid.noFees, inventoryItem.currencyCode, sellerInfo);
                }
                break;
            case 'goat':
                if ((_e = inventoryItem.lowestAsk) === null || _e === void 0 ? void 0 : _e.noFees) {
                    inventoryItem.lowestAsk.withSellerFees = this.goatSellerPrice(inventoryItem.lowestAsk.noFees, inventoryItem.currencyCode, sellerInfo, exchangeRates);
                    inventoryItem.lowestAsk.withBuyerFees = this.goatBuyerPrice(inventoryItem.lowestAsk.noFees, inventoryItem.currencyCode, sellerInfo, exchangeRates);
                }
                if ((_f = inventoryItem.highestBid) === null || _f === void 0 ? void 0 : _f.noFees) {
                    inventoryItem.highestBid.withSellerFees = this.goatSellerPrice(inventoryItem.highestBid.noFees, inventoryItem.currencyCode, sellerInfo, exchangeRates);
                    inventoryItem.highestBid.withBuyerFees = this.goatBuyerPrice(inventoryItem.highestBid.noFees, inventoryItem.currencyCode, sellerInfo, exchangeRates);
                }
                break;
        }
        return inventoryItem;
    };
    return PriceCalculator;
}());
exports.PriceCalculator = PriceCalculator;
//# sourceMappingURL=priceCalculator.js.map