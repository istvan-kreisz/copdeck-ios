import { Infer } from 'superstruct';
import { ObjectSchema } from 'superstruct/lib/utils';
import { Item, Store, PriceAlert, StoreInfo, Proxy, Country, CurrencyCodeInternal, CountryName } from './types';
declare function notEmpty<T>(value: T | null | undefined): value is T;
declare function convertToArray<S extends ObjectSchema>(val: any, schema: S, extraFields?: object, validator?: (element: any) => boolean): import("superstruct/lib/utils").Simplify<import("superstruct/lib/utils").Optionalize<{ [K in keyof S]: Infer<S[K]>; }>>[];
declare function convertToType<S extends ObjectSchema>(val: any, schema: S): import("superstruct/lib/utils").Simplify<import("superstruct/lib/utils").Optionalize<{ [K in keyof S]: Infer<S[K]>; }>>;
declare function itemBestPrice(item: Item, alert: PriceAlert): number | null;
declare function itemStoresOrdered(item: Item): StoreInfo[];
declare function didFailToFetchAllStorePrices(item: Item): boolean;
declare function itemImageURL(item: Item): {
    url: string;
    store: Store;
} | undefined;
declare function bestStoreInfo(item: Item): StoreInfo | undefined;
declare function promiseAllSkippingErrors<T>(promises: Promise<T>[], errorHandler?: ((err: any, rethrow?: boolean) => void) | undefined): Promise<Array<T>>;
declare function removeDuplicates<T>(arr: T[], key?: string): T[];
declare type TimeInterval = 'months' | 'weeks' | 'days' | 'hours' | 'minutes' | 'seconds';
declare const isOlderThan: (time: number, num: number, unit: TimeInterval) => boolean;
declare function stringify(proxy: Proxy): string;
declare function randomElement<T>(arr: T[]): T;
declare const log: (message: any, isLoggingEnabled: boolean) => void;
declare function shuffleArray<T>(array: T[]): T[];
declare const getUserAgent: (browser: 'Chrome' | 'Firefox' | 'OPR' | 'Safari') => string;
declare const randomDelay: (maxDelay?: number) => Promise<void>;
declare const convert: (value: number, from: CurrencyCodeInternal, to: CurrencyCodeInternal, rounded: boolean, exchangeRates?: {
    usd: number;
    gbp: number;
    chf: number;
    nok: number;
} | undefined) => number;
declare function isCountry(country: any): country is Country;
declare function isCountryName(countryName: any): countryName is CountryName;
export { convertToArray, convertToType, notEmpty, itemBestPrice, itemImageURL, itemStoresOrdered, didFailToFetchAllStorePrices, bestStoreInfo, promiseAllSkippingErrors, removeDuplicates, isOlderThan, stringify, randomElement, log, shuffleArray, getUserAgent, randomDelay, convert, isCountry, isCountryName, };
