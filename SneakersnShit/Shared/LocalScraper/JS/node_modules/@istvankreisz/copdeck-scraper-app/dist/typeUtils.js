"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isCountryName = exports.isCountry = exports.convert = exports.randomDelay = exports.getUserAgent = exports.shuffleArray = exports.log = exports.randomElement = exports.stringify = exports.isOlderThan = exports.removeDuplicates = exports.promiseAllSkippingErrors = exports.bestStoreInfo = exports.didFailToFetchAllStorePrices = exports.itemStoresOrdered = exports.itemImageURL = exports.itemBestPrice = exports.notEmpty = exports.convertToType = exports.convertToArray = void 0;
var superstruct_1 = require("superstruct");
var utils_1 = require("./utils");
var types_1 = require("./types");
// const UserAgent = require('user-agents')
function trimUnusedValues(obj, schema) {
    var containedKeys = Object.keys(schema);
    if (typeof obj === 'object' && obj !== null && schema !== null && containedKeys.length > 0) {
        var fields = Object.entries(obj).filter(function (entry) { return containedKeys.includes(entry[0]); });
        var result_1 = {};
        fields.forEach(function (value) {
            result_1[value[0]] = value[1];
        });
        return result_1;
    }
    else {
        return null;
    }
}
function notEmpty(value) {
    return value !== null && value !== undefined;
}
exports.notEmpty = notEmpty;
function convertToArray(val, schema, extraFields, validator) {
    var ElementType = superstruct_1.object(schema);
    superstruct_1.assert(val, superstruct_1.array(superstruct_1.any()));
    var mappedHits = val
        .filter(function (element) {
        return validator ? validator(element) : true;
    })
        .map(function (element) {
        try {
            if (superstruct_1.is(extraFields, superstruct_1.object())) {
                Object.entries(extraFields).forEach(function (_a) {
                    var key = _a[0], value = _a[1];
                    return (element[key] = value);
                });
            }
            var trimmedElement = trimUnusedValues(element, schema);
            return superstruct_1.create(trimmedElement, ElementType);
        }
        catch (err) {
            utils_1.handleError(err);
            return null;
        }
    })
        .filter(notEmpty);
    return mappedHits;
}
exports.convertToArray = convertToArray;
function convertToType(val, schema) {
    var ResultType = superstruct_1.object(schema);
    var trimmedElement = trimUnusedValues(val, schema);
    return superstruct_1.create(trimmedElement, ResultType);
}
exports.convertToType = convertToType;
function itemBestPrice(item, alert) {
    var _a, _b;
    var bestPrices = item.storePrices
        .filter(function (prices) {
        return alert ? alert.stores.map(function (s) { return s.id; }).includes(prices.store.id) : true;
    })
        .map(function (prices) {
        var _a;
        var price = (_a = prices.inventory
            .filter(function (inventoryItem) { return inventoryItem.size === alert.targetSize; })
            .map(function (inventoryItem) {
            return alert.priceType === 'ask' ? inventoryItem.lowestAsk : inventoryItem.highestBid;
        })) === null || _a === void 0 ? void 0 : _a[0];
        if (alert.feeType === 'Buy') {
            return price === null || price === void 0 ? void 0 : price.withBuyerFees;
        }
        else if (alert.feeType === 'Sell') {
            return price === null || price === void 0 ? void 0 : price.withSellerFees;
        }
        else {
            return price === null || price === void 0 ? void 0 : price.noFees;
        }
    })
        .filter(notEmpty);
    if (bestPrices.length > 0) {
        if ((alert === null || alert === void 0 ? void 0 : alert.relation) === 'above') {
            return (_a = Math.max.apply(Math, bestPrices)) !== null && _a !== void 0 ? _a : 0;
        }
        else {
            return (_b = Math.min.apply(Math, bestPrices)) !== null && _b !== void 0 ? _b : 0;
        }
    }
    else {
        return null;
    }
}
exports.itemBestPrice = itemBestPrice;
function itemStoresOrdered(item) {
    return types_1.ALLSTORES.map(function (store) { return item.storeInfo.find(function (i) { return i.store.id === store.id; }); }).filter(notEmpty);
}
exports.itemStoresOrdered = itemStoresOrdered;
function didFailToFetchAllStorePrices(item) {
    return item.storeInfo.length < types_1.ALLSTORES.length;
}
exports.didFailToFetchAllStorePrices = didFailToFetchAllStorePrices;
function itemImageURL(item) {
    var _a;
    var store = (_a = itemStoresOrdered(item)) === null || _a === void 0 ? void 0 : _a[0];
    return store && store.imageURL ? { url: store.imageURL, store: store.store } : undefined;
}
exports.itemImageURL = itemImageURL;
function bestStoreInfo(item) {
    var _a;
    return (_a = itemStoresOrdered(item)) === null || _a === void 0 ? void 0 : _a[0];
}
exports.bestStoreInfo = bestStoreInfo;
function promiseAllSkippingErrors(promises, errorHandler) {
    if (errorHandler === void 0) { errorHandler = undefined; }
    return __awaiter(this, void 0, void 0, function () {
        var results;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, Promise.all(promises.map(function (p) {
                        return p.catch(function (err) {
                            if (errorHandler) {
                                errorHandler(err);
                            }
                            return null;
                        });
                    }))];
                case 1:
                    results = _a.sent();
                    return [2 /*return*/, results.filter(notEmpty)];
            }
        });
    });
}
exports.promiseAllSkippingErrors = promiseAllSkippingErrors;
function removeDuplicates(arr, key) {
    if (key === void 0) { key = 'id'; }
    return arr.filter(function (value, index, array) { return array.findIndex(function (t) { return t[key] === value[key]; }) === index; });
}
exports.removeDuplicates = removeDuplicates;
var isOlderThan = function (time, num, unit) {
    if (superstruct_1.is(time, superstruct_1.number())) {
        var multiplier = 1;
        switch (unit) {
            case 'months':
                multiplier = 30 * 24 * 3600 * 1000;
                break;
            case 'weeks':
                multiplier = 7 * 24 * 3600 * 1000;
                break;
            case 'days':
                multiplier = 24 * 3600 * 1000;
                break;
            case 'hours':
                multiplier = 3600 * 1000;
                break;
            case 'minutes':
                multiplier = 60 * 1000;
                break;
            case 'seconds':
                multiplier = 1000;
                break;
            default:
                break;
        }
        return time < new Date().getTime() - num * multiplier;
    }
    else {
        return false;
    }
};
exports.isOlderThan = isOlderThan;
function stringify(proxy) {
    var string = proxy.protocol + '://';
    var auth = proxy.auth;
    if (auth) {
        string += auth.username + ":" + auth.password + "@";
    }
    string += proxy.host + ":" + proxy.port;
    return string;
}
exports.stringify = stringify;
function randomElement(arr) {
    return arr[Math.floor(Math.random() * arr.length)];
}
exports.randomElement = randomElement;
var log = function (message, isLoggingEnabled) {
    if (isLoggingEnabled) {
        console.log(message);
    }
};
exports.log = log;
function shuffleArray(array) {
    var _a;
    for (var i = array.length - 1; i > 0; i--) {
        var j = Math.floor(Math.random() * (i + 1));
        _a = [array[j], array[i]], array[i] = _a[0], array[j] = _a[1];
    }
    return array;
}
exports.shuffleArray = shuffleArray;
var getUserAgent = function (browser) {
    // const regex = new RegExp(browser)
    // const userAgent = new UserAgent([
    // 	regex,
    // 	{
    // 		platform: 'MacIntel',
    // 	},
    // ])
    // return userAgent.toString()
    return 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36';
};
exports.getUserAgent = getUserAgent;
var randomDelay = function (maxDelay) {
    if (maxDelay === void 0) { maxDelay = 100; }
    return __awaiter(void 0, void 0, void 0, function () {
        var delay;
        return __generator(this, function (_a) {
            delay = Math.random() * maxDelay;
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    setTimeout(function () {
                        resolve();
                    }, delay);
                })];
        });
    });
};
exports.randomDelay = randomDelay;
var convert = function (value, from, to, rounded, exchangeRates) {
    var result = value;
    if (exchangeRates) {
        switch (from) {
            case 'USD':
                switch (to) {
                    case 'EUR':
                        result = value / exchangeRates.usd;
                        break;
                    case 'GBP':
                        result = (value / exchangeRates.usd) * exchangeRates.gbp;
                        break;
                    case 'USD':
                        break;
                    case 'CHF':
                        result = (value / exchangeRates.usd) * exchangeRates.chf;
                        break;
                    case 'NOK':
                        result = (value / exchangeRates.usd) * exchangeRates.nok;
                        break;
                }
                break;
            case 'GBP':
                switch (to) {
                    case 'EUR':
                        result = value / exchangeRates.gbp;
                        break;
                    case 'GBP':
                        break;
                    case 'USD':
                        result = (value / exchangeRates.gbp) * exchangeRates.usd;
                        break;
                    case 'CHF':
                        result = (value / exchangeRates.gbp) * exchangeRates.chf;
                        break;
                    case 'NOK':
                        result = (value / exchangeRates.gbp) * exchangeRates.nok;
                        break;
                }
                break;
            case 'EUR':
                switch (to) {
                    case 'EUR':
                        break;
                    case 'GBP':
                        result = value * exchangeRates.gbp;
                        break;
                    case 'USD':
                        result = value * exchangeRates.usd;
                        break;
                    case 'CHF':
                        result = value * exchangeRates.chf;
                        break;
                    case 'NOK':
                        result = value * exchangeRates.nok;
                        break;
                }
                break;
            case 'CHF':
                switch (to) {
                    case 'EUR':
                        result = value / exchangeRates.chf;
                        break;
                    case 'GBP':
                        result = (value / exchangeRates.chf) * exchangeRates.gbp;
                        break;
                    case 'USD':
                        result = (value / exchangeRates.chf) * exchangeRates.usd;
                        break;
                    case 'CHF':
                        break;
                    case 'NOK':
                        result = (value / exchangeRates.chf) * exchangeRates.nok;
                        break;
                }
                break;
            case 'NOK':
                switch (to) {
                    case 'EUR':
                        result = value / exchangeRates.nok;
                        break;
                    case 'GBP':
                        result = (value / exchangeRates.nok) * exchangeRates.gbp;
                        break;
                    case 'USD':
                        result = (value / exchangeRates.nok) * exchangeRates.usd;
                        break;
                    case 'CHF':
                        result = (value / exchangeRates.nok) * exchangeRates.chf;
                        break;
                    case 'NOK':
                        break;
                }
                break;
        }
    }
    return rounded ? Math.round(result) : result;
};
exports.convert = convert;
function isCountry(country) {
    return country.name !== undefined && country.code !== undefined;
}
exports.isCountry = isCountry;
function isCountryName(countryName) {
    return countryName !== undefined;
}
exports.isCountryName = isCountryName;
//# sourceMappingURL=typeUtils.js.map