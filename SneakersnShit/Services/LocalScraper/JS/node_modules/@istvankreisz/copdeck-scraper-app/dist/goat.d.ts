import { StorePrices, StoreInfo, Scraper, Fetcher, APIConfig, ScraperConfig } from './types';
declare class GoatScraper implements Scraper {
    readonly store = "goat";
    config: ScraperConfig;
    fetcher: Fetcher;
    constructor();
    set(fetcher: Fetcher): void;
    generateNewConfig(): void;
    sendDummyRequest: (storeInfo: StoreInfo, apiConfig: APIConfig) => Promise<any>;
    setProxies(apiConfig: APIConfig): void;
    resetConfig: (apiConfig: APIConfig, forced: boolean, storeInfo: StoreInfo) => Promise<void>;
    setCookies: (apiConfig: APIConfig, storeInfo: StoreInfo) => Promise<void>;
    setUpConfig: (apiConfig: APIConfig, storeInfo?: {
        name: string;
        store: {
            name: "StockX";
            id: "stockx";
        } | {
            name: "Klekt";
            id: "klekt";
        } | {
            name: "GOAT";
            id: "goat";
        };
        sku: string;
        slug: string;
        url: string;
        sellUrl: string;
        buyUrl: string;
        brand: string;
        retailPrice?: number | null | undefined;
        imageURL?: string | null | undefined;
        productId?: string | null | undefined;
    } | undefined) => Promise<void>;
    getData: (apiConfig: APIConfig, request: () => Promise<any>, storeInfo?: {
        name: string;
        store: {
            name: "StockX";
            id: "stockx";
        } | {
            name: "Klekt";
            id: "klekt";
        } | {
            name: "GOAT";
            id: "goat";
        };
        sku: string;
        slug: string;
        url: string;
        sellUrl: string;
        buyUrl: string;
        brand: string;
        retailPrice?: number | null | undefined;
        imageURL?: string | null | undefined;
        productId?: string | null | undefined;
    } | undefined) => Promise<any>;
    search(searchTerm: string, apiConfig: APIConfig): Promise<Array<StoreInfo>>;
    getItemPrices(storeInfo: StoreInfo, apiConfig: APIConfig): Promise<StorePrices>;
}
declare const _default: GoatScraper;
export default _default;
